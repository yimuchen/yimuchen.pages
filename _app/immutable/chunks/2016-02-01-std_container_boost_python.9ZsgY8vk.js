import{s as fs,n as Q}from"./scheduler.D8jTWijz.js";import{S as vs,i as ms,e,s as p,c as t,g as o,a as c,b as F,d as a,f as l}from"./index.CNPTuR7J.js";function bs(hs){let r,X='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#criteria">Criteria</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#setting-up-helper-functions">Setting up helper functions</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#shorthand-macros">Shorthand macros</a></li><li class="toc-item toc-item-h1"><a class="toc-link toc-link-h1" href="#end-notes">End notes:</a></li></ol>',H,f,$=`<a href="http://www.boost.org/doc/libs/1_60_0/libs/python/doc/html/index.html" rel="nofollow">Boost/python</a>, a small quirk is that there is that the mapping
from the C++ standard template library container classes to the python in-built
data types are not done for you! Here is q quick recipe on how this could be
done:`,q,i,ss='<a aria-hidden="true" tabindex="-1" href="#criteria"><span class="icon icon-link"></span></a>Criteria',L,v,ns=`Suppose that you have some method in your C++ class <code>AClass</code> that returns or
receives a vector, you will need to expose the template class
<code>std::vector&lt;MyClass&gt;</code> to python for class <code>AClass</code> to fully function in your
python code. In short, we have the data types:`,P,y,as=`<div class="code-block-header"><span class="code-block-lang">[cpp]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">AClass</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">MyClass</span></span>
<span class="line"><span style="color:#F8F8F2">std::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt;;</span></span></code></pre></div>`,B,m,ls=`That we wish to expose to python. <code>AClass</code> and <code>MyClass</code> is straight forward:
you expose it with the <a href="http://www.boost.org/doc/libs/1_60_0/libs/python/doc/html/tutorial/tutorial/exposing.html" rel="nofollow">usual methods</a>. But the standard template
classes are a bit more tedious. For it to function like a python list, we need
to map the C++ operators with the python functions:`,N,b,es="<li><code>__len__</code></li> <li><code>__getitem__</code></li> <li><code>__setitem__</code></li> <li><code>__delitem__</code></li> <li><code>__iter__</code></li> <li><code>append</code></li> <li><code>clear</code></li>",V,d,ts='<a aria-hidden="true" tabindex="-1" href="#setting-up-helper-functions"><span class="icon icon-link"></span></a>Setting up helper functions',O,C,os=`Exposing functions that have C++ methods directly corresponding to is simple,
but for those that use the C++ operator, it would be a bit harder. To achieve
this, we set up the help class:`,S,E,ps=`<div class="code-block-header">Helper class to assist with setting up the methods <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-block-numbered numbered-start-0 code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line" data-line="1"><span style="color:#66D9EF;font-style:italic">template</span><span style="color:#F8F8F2">&lt;</span><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F8F8F2">&gt;</span></span>
<span class="line" data-line="2"><span style="color:#66D9EF;font-style:italic">struct</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2"> {</span></span>
<span class="line" data-line="3"><span style="color:#F92672">   typedef</span><span style="color:#F92672"> typename</span><span> </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">value_type</span><span style="color:#F8F8F2"> V;</span></span>
<span class="line" data-line="4"></span>
<span class="line" data-line="5"><span style="color:#F92672">   static</span><span> </span><span style="color:#A6E22E;text-decoration:underline">V</span><span style="color:#F92672">&amp;</span><span style="color:#A6E22E"> get</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> x</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2"> )</span></span>
<span class="line" data-line="6"><span style="color:#F8F8F2">   {</span></span>
<span class="line" data-line="7"><span style="color:#F92672">      if</span><span style="color:#F8F8F2">( i </span><span style="color:#F92672">&lt;</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2"> ) { i </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); }</span></span>
<span class="line" data-line="8"><span style="color:#F92672">      if</span><span style="color:#F8F8F2">( i </span><span style="color:#F92672">&gt;=</span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &amp;&amp;</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">unsigned</span><span style="color:#F8F8F2">)i </span><span style="color:#F92672">&lt;</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() ) { </span><span style="color:#F92672">return</span><span style="color:#F8F8F2"> x[i]; }</span></span>
<span class="line" data-line="9"><span style="color:#F92672">      else</span><span style="color:#F8F8F2"> { </span><span style="color:#A6E22E">IndexError</span><span style="color:#F8F8F2">(); </span><span style="color:#F92672">return</span><span style="color:#F8F8F2"> x[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">]; }</span></span>
<span class="line" data-line="10"><span style="color:#F8F8F2">   }</span></span>
<span class="line" data-line="11"><span style="color:#F92672">   static</span><span style="color:#66D9EF;font-style:italic"> void</span><span style="color:#A6E22E"> set</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> x</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">V</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2"> )</span></span>
<span class="line" data-line="12"><span style="color:#F8F8F2">   {</span></span>
<span class="line" data-line="13"><span style="color:#F92672">      if</span><span style="color:#F8F8F2">( i </span><span style="color:#F92672">&lt;</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2"> ) { i </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); }</span></span>
<span class="line" data-line="14"><span style="color:#F92672">      if</span><span style="color:#F8F8F2">( i </span><span style="color:#F92672">&gt;=</span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &amp;&amp;</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">unsigned</span><span style="color:#F8F8F2">)i </span><span style="color:#F92672">&lt;</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() ) { x[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> v; }</span></span>
<span class="line" data-line="15"><span style="color:#F92672">      else</span><span style="color:#F8F8F2"> { </span><span style="color:#A6E22E">IndexError</span><span style="color:#F8F8F2">(); }</span></span>
<span class="line" data-line="16"><span style="color:#F8F8F2">   }</span></span>
<span class="line" data-line="17"><span style="color:#F92672">   static</span><span style="color:#66D9EF;font-style:italic"> void</span><span style="color:#A6E22E"> del</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> x</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2"> )</span></span>
<span class="line" data-line="18"><span style="color:#F8F8F2">   {</span></span>
<span class="line" data-line="19"><span style="color:#F92672">      if</span><span style="color:#F8F8F2">( i </span><span style="color:#F92672">&lt;</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2"> ) { i </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); }</span></span>
<span class="line" data-line="20"><span style="color:#F92672">      if</span><span style="color:#F8F8F2">( i </span><span style="color:#F92672">&gt;=</span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &amp;&amp;</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">unsigned</span><span style="color:#F8F8F2">)i </span><span style="color:#F92672">&lt;</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() ) { x.</span><span style="color:#A6E22E">erase</span><span style="color:#F8F8F2">( x.</span><span style="color:#A6E22E">begin</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> i ); }</span></span>
<span class="line" data-line="21"><span style="color:#F92672">      else</span><span style="color:#F8F8F2"> { </span><span style="color:#A6E22E">IndexError</span><span style="color:#F8F8F2">(); }</span></span>
<span class="line" data-line="22"><span style="color:#F8F8F2">   }</span></span>
<span class="line" data-line="23"><span style="color:#F92672">   static</span><span style="color:#66D9EF;font-style:italic"> void</span><span style="color:#A6E22E"> add</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> x</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">V</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2"> )</span></span>
<span class="line" data-line="24"><span style="color:#F8F8F2">   {</span></span>
<span class="line" data-line="25"><span style="color:#F8F8F2">      x.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">( v );</span></span>
<span class="line" data-line="26"><span style="color:#F8F8F2">   }</span></span>
<span class="line" data-line="27"></span>
<span class="line" data-line="28"><span style="color:#F92672">   static</span><span style="color:#66D9EF;font-style:italic"> bool</span><span style="color:#A6E22E"> in</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> x</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">V</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2"> ) {</span></span>
<span class="line" data-line="29"><span style="color:#F92672">      return</span><span style="color:#A6E22E"> find_eq</span><span style="color:#F8F8F2">( x.begin, x.end, v ) </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">end</span><span style="color:#F8F8F2">();</span></span>
<span class="line" data-line="30"><span style="color:#F8F8F2">   }</span></span>
<span class="line" data-line="31"><span style="color:#F92672">   static</span><span style="color:#66D9EF;font-style:italic"> int</span><span style="color:#A6E22E"> index</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> x</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">V</span><span style="color:#F92672">&amp;</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2"> ) {</span></span>
<span class="line" data-line="32"><span style="color:#66D9EF;font-style:italic">      int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line" data-line="33"><span style="color:#F92672">      for</span><span style="color:#F8F8F2">( </span><span style="color:#F92672">typename</span><span> </span><span style="color:#A6E22E;text-decoration:underline">T</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">const_iterator</span><span style="color:#F8F8F2"> it </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> x.begin; it </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> x.</span><span style="color:#A6E22E">end</span><span style="color:#F8F8F2">(); </span><span style="color:#F92672">++</span><span style="color:#F8F8F2">it, </span><span style="color:#F92672">++</span><span style="color:#F8F8F2">i )</span></span>
<span class="line" data-line="34"><span style="color:#F92672">         if</span><span style="color:#F8F8F2">( </span><span style="color:#F92672">*</span><span style="color:#F8F8F2">it </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> v ) { </span><span style="color:#F92672">return</span><span style="color:#F8F8F2"> i; }</span></span>
<span class="line" data-line="35"><span style="color:#F92672">      return</span><span style="color:#F92672"> -</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">;</span></span>
<span class="line" data-line="36"><span style="color:#F8F8F2">   }</span></span>
<span class="line" data-line="37"><span style="color:#F8F8F2">};</span></span></code></pre></div>`,I,k,cs=`this way we have a direct map to the python container access function to C++
template container functions, we could then proceed to expose the class the
usual way:`,z,u,rs=`<div class="code-block-header">Calling the boost::python methods <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-block-numbered numbered-start-0 code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line" data-line="1"><span style="color:#A6E22E">BOOST_PYTHON_MODULE</span><span style="color:#F8F8F2">( myModule ){</span></span>
<span class="line" data-line="2"><span>   </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">class_</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt; &gt;( </span><span style="color:#E6DB74">&quot;std_vector_MyClass&quot;</span><span style="color:#F8F8F2"> )</span></span>
<span class="line" data-line="3"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__len__&quot;</span><span style="color:#F8F8F2">     , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt;::size)</span></span>
<span class="line" data-line="4"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;clear&quot;</span><span style="color:#F8F8F2">       , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt;::clear)</span></span>
<span class="line" data-line="5"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;append&quot;</span><span style="color:#F8F8F2">      , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt; &gt;::add</span></span>
<span class="line" data-line="6"><span style="color:#F8F8F2">            , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">with_custodian_and_ward</span><span style="color:#F8F8F2">&lt;</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">&gt;())</span></span>
<span class="line" data-line="7"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__setitem__&quot;</span><span style="color:#F8F8F2"> , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt; &gt;::set</span></span>
<span class="line" data-line="8"><span style="color:#F8F8F2">            , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">with_custodian_and_ward</span><span style="color:#F8F8F2">&lt;</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">&gt;())</span></span>
<span class="line" data-line="9"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__getitem__&quot;</span><span style="color:#F8F8F2"> , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt; &gt;::get</span></span>
<span class="line" data-line="10"><span style="color:#F8F8F2">            , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">return_value_policy</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">copy_non_const_reference</span><span style="color:#F8F8F2">&gt;())</span></span>
<span class="line" data-line="11"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__delitem__&quot;</span><span style="color:#F8F8F2"> , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt; &gt;::del)</span></span>
<span class="line" data-line="12"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__iter__&quot;</span><span style="color:#F8F8F2">    , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">iterator</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">MyClass</span><span style="color:#F8F8F2">&gt; &gt;() )</span></span>
<span class="line" data-line="13"><span style="color:#F8F8F2">      ;</span></span>
<span class="line" data-line="14"><span style="color:#F8F8F2">}</span></span></code></pre></div>`,R,A,Fs='<a aria-hidden="true" tabindex="-1" href="#shorthand-macros"><span class="icon icon-link"></span></a>Shorthand macros',j,M,is=`Furthermore, if there are multiple C++ vector type we want to expose, we could
define the C++ macros for a quick shorthand:`,U,x,ys=`<div class="code-block-header">Macro for boost call shorthand <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-block-numbered numbered-start-0 code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line" data-line="1"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> MAKE_VECTOR_WRAPPER</span><span style="color:#F8F8F2">( </span><span style="color:#FD971F;font-style:italic">CPP_NAME</span><span style="color:#F8F8F2"> , </span><span style="color:#FD971F;font-style:italic">PYTHON_NAME</span><span style="color:#F8F8F2"> )                                        </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="2"><span>   </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">class_</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2"> &gt;( #PYTHON_NAME )                                         </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="3"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__len__&quot;</span><span style="color:#F8F8F2">     , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2">::size)                                                 </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="4"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;clear&quot;</span><span style="color:#F8F8F2">       , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2">::clear)                                                </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="5"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;append&quot;</span><span style="color:#F8F8F2">      , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2"> &gt;::add                                    </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="6"><span style="color:#F8F8F2">            , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">with_custodian_and_ward</span><span style="color:#F8F8F2">&lt;</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">&gt;())                                </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="7"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__setitem__&quot;</span><span style="color:#F8F8F2"> , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2"> &gt;::set                                    </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="8"><span style="color:#F8F8F2">            , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">with_custodian_and_ward</span><span style="color:#F8F8F2">&lt;</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">&gt;())                                </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="9"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__getitem__&quot;</span><span style="color:#F8F8F2"> , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2"> &gt;::get                                    </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="10"><span style="color:#F8F8F2">            , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">return_value_policy</span><span style="color:#F8F8F2">&lt;</span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">copy_non_const_reference</span><span style="color:#F8F8F2">&gt;()) </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="11"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__delitem__&quot;</span><span style="color:#F8F8F2"> , </span><span style="color:#F92672">&amp;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">vector_item</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2"> &gt;::del)                                   </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="12"><span style="color:#F8F8F2">      .</span><span style="color:#A6E22E">def</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">&quot;__iter__&quot;</span><span style="color:#F8F8F2">    , </span><span style="color:#A6E22E;text-decoration:underline">boost</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E;text-decoration:underline">python</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">iterator</span><span style="color:#F8F8F2">&lt; </span><span style="color:#A6E22E;text-decoration:underline">CPP_NAME</span><span style="color:#F8F8F2"> &gt;() )                           </span><span style="color:#AE81FF">\\</span></span>
<span class="line" data-line="13"><span style="color:#F8F8F2">;</span></span></code></pre></div>`,W,D,ds="So that the addition for multiple vectors is made simply as:",Y,_,Es=`<div class="code-block-header">All together with macros <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-block-numbered numbered-start-0 code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line" data-line="1"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &lt;boost/python.hpp&gt;</span></span>
<span class="line" data-line="2"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &lt;vector&gt;</span></span>
<span class="line" data-line="3"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &lt;string&gt;</span></span>
<span class="line" data-line="4"></span>
<span class="line" data-line="5"><span style="color:#A6E22E">BOOST_PYTHON_MODULE</span><span style="color:#F8F8F2">( MyStdVector )</span></span>
<span class="line" data-line="6"><span style="color:#F8F8F2">{</span></span>
<span class="line" data-line="7"><span style="color:#A6E22E">   MAKE_VECTOR_WRAPPER</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::vector</span><span style="color:#F92672">&lt;</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::string </span><span style="color:#F92672">&gt;</span><span style="color:#F8F8F2"> , std_vector_string );</span></span>
<span class="line" data-line="8"><span style="color:#A6E22E">   MAKE_VECTOR_WRAPPER</span><span style="color:#F8F8F2">( </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">::vector</span><span style="color:#F92672">&lt;</span><span style="color:#66D9EF;font-style:italic"> double</span><span style="color:#F92672"> &gt;</span><span style="color:#F8F8F2">      , std_vector_double );</span></span>
<span class="line" data-line="9"><span style="color:#F8F8F2">}</span></span></code></pre></div>`,K,T,us="Happy coding!",Z,h,As='<a aria-hidden="true" tabindex="-1" href="#end-notes"><span class="icon icon-link"></span></a>End notes:',G,g,xs=`My recipe is essentially a modified version from
<a href="https://wiki.python.org/moin/boost.python/StlContainers" rel="nofollow">here</a>, what I have
added is:`,J,w,_s=`<li>Remove all <code>const</code> keywords to assure that they will compile under any
compile flag setting</li> <li>Added all namespace specification for user to expand.</li> <li>Written everything I could into the same code segment for copy-and-paste ease
:)</li>`;return{c(){r=e("nav"),r.innerHTML=X,H=p(),f=e("p"),f.innerHTML=$,q=p(),i=e("h2"),i.innerHTML=ss,L=p(),v=e("p"),v.innerHTML=ns,P=p(),y=e("div"),y.innerHTML=as,B=p(),m=e("p"),m.innerHTML=ls,N=p(),b=e("ul"),b.innerHTML=es,V=p(),d=e("h2"),d.innerHTML=ts,O=p(),C=e("p"),C.textContent=os,S=p(),E=e("div"),E.innerHTML=ps,I=p(),k=e("p"),k.textContent=cs,z=p(),u=e("div"),u.innerHTML=rs,R=p(),A=e("h2"),A.innerHTML=Fs,j=p(),M=e("p"),M.textContent=is,U=p(),x=e("div"),x.innerHTML=ys,W=p(),D=e("p"),D.textContent=ds,Y=p(),_=e("div"),_.innerHTML=Es,K=p(),T=e("p"),T.textContent=us,Z=p(),h=e("h1"),h.innerHTML=As,G=p(),g=e("p"),g.innerHTML=xs,J=p(),w=e("ul"),w.innerHTML=_s,this.h()},l(s){r=t(s,"NAV",{class:!0,"data-svelte-h":!0}),o(r)!=="svelte-14sg4su"&&(r.innerHTML=X),H=c(s),f=t(s,"P",{"data-svelte-h":!0}),o(f)!=="svelte-bi7gxi"&&(f.innerHTML=$),q=c(s),i=t(s,"H2",{id:!0,"data-svelte-h":!0}),o(i)!=="svelte-1o8ht99"&&(i.innerHTML=ss),L=c(s),v=t(s,"P",{"data-svelte-h":!0}),o(v)!=="svelte-wyso08"&&(v.innerHTML=ns),P=c(s),y=t(s,"DIV",{class:!0,"data-svelte-h":!0}),o(y)!=="svelte-1tzi3rr"&&(y.innerHTML=as),B=c(s),m=t(s,"P",{"data-svelte-h":!0}),o(m)!=="svelte-j9enlj"&&(m.innerHTML=ls),N=c(s),b=t(s,"UL",{"data-svelte-h":!0}),o(b)!=="svelte-ckkw4k"&&(b.innerHTML=es),V=c(s),d=t(s,"H2",{id:!0,"data-svelte-h":!0}),o(d)!=="svelte-1kb1jss"&&(d.innerHTML=ts),O=c(s),C=t(s,"P",{"data-svelte-h":!0}),o(C)!=="svelte-9da6t"&&(C.textContent=os),S=c(s),E=t(s,"DIV",{class:!0,"data-svelte-h":!0}),o(E)!=="svelte-1nui78j"&&(E.innerHTML=ps),I=c(s),k=t(s,"P",{"data-svelte-h":!0}),o(k)!=="svelte-ads09s"&&(k.textContent=cs),z=c(s),u=t(s,"DIV",{class:!0,"data-svelte-h":!0}),o(u)!=="svelte-1dcqa5n"&&(u.innerHTML=rs),R=c(s),A=t(s,"H2",{id:!0,"data-svelte-h":!0}),o(A)!=="svelte-1s0a0le"&&(A.innerHTML=Fs),j=c(s),M=t(s,"P",{"data-svelte-h":!0}),o(M)!=="svelte-spuce2"&&(M.textContent=is),U=c(s),x=t(s,"DIV",{class:!0,"data-svelte-h":!0}),o(x)!=="svelte-j3erz2"&&(x.innerHTML=ys),W=c(s),D=t(s,"P",{"data-svelte-h":!0}),o(D)!=="svelte-1fmg9t0"&&(D.textContent=ds),Y=c(s),_=t(s,"DIV",{class:!0,"data-svelte-h":!0}),o(_)!=="svelte-1ci1o4y"&&(_.innerHTML=Es),K=c(s),T=t(s,"P",{"data-svelte-h":!0}),o(T)!=="svelte-4k4sln"&&(T.textContent=us),Z=c(s),h=t(s,"H1",{id:!0,"data-svelte-h":!0}),o(h)!=="svelte-1xbjkok"&&(h.innerHTML=As),G=c(s),g=t(s,"P",{"data-svelte-h":!0}),o(g)!=="svelte-1eqq9xe"&&(g.innerHTML=xs),J=c(s),w=t(s,"UL",{"data-svelte-h":!0}),o(w)!=="svelte-1xfsbkf"&&(w.innerHTML=_s),this.h()},h(){F(r,"class","toc"),F(i,"id","criteria"),F(y,"class","code-block-container"),F(d,"id","setting-up-helper-functions"),F(E,"class","code-block-container"),F(u,"class","code-block-container"),F(A,"id","shorthand-macros"),F(x,"class","code-block-container"),F(_,"class","code-block-container"),F(h,"id","end-notes")},m(s,n){a(s,r,n),a(s,H,n),a(s,f,n),a(s,q,n),a(s,i,n),a(s,L,n),a(s,v,n),a(s,P,n),a(s,y,n),a(s,B,n),a(s,m,n),a(s,N,n),a(s,b,n),a(s,V,n),a(s,d,n),a(s,O,n),a(s,C,n),a(s,S,n),a(s,E,n),a(s,I,n),a(s,k,n),a(s,z,n),a(s,u,n),a(s,R,n),a(s,A,n),a(s,j,n),a(s,M,n),a(s,U,n),a(s,x,n),a(s,W,n),a(s,D,n),a(s,Y,n),a(s,_,n),a(s,K,n),a(s,T,n),a(s,Z,n),a(s,h,n),a(s,G,n),a(s,g,n),a(s,J,n),a(s,w,n)},p:Q,i:Q,o:Q,d(s){s&&(l(r),l(H),l(f),l(q),l(i),l(L),l(v),l(P),l(y),l(B),l(m),l(N),l(b),l(V),l(d),l(O),l(C),l(S),l(E),l(I),l(k),l(z),l(u),l(R),l(A),l(j),l(M),l(U),l(x),l(W),l(D),l(Y),l(_),l(K),l(T),l(Z),l(h),l(G),l(g),l(J),l(w))}}}const Ms={title:"STL containers in boost python",description:"A simple recipe for getting std containers in boost python",tags:["recipes","c++","python","boost"],modified:"2016-02-01T00:00:00.000Z",banner:"code_head_1.png"};class Ds extends vs{constructor(r){super(),ms(this,r,null,bs,fs,{})}}export{Ds as default,Ms as metadata};
