import{s as Ci,n as gt}from"./scheduler.D8jTWijz.js";import{S as Mi,i as Li,e as s,s as a,c as l,g as p,a as o,b as c,d as i,f as n}from"./index.CNPTuR7J.js";function _i(Ti){let r,xt='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#general-recommendations">General recommendations</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#configuring-vim">Configuring Vim</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#my-vimrc-settings">My vimrc settings</a><ol class="toc-level toc-level-3"><li class="toc-item toc-item-h4"><a class="toc-link toc-link-h4" href="#indention-settings">Indention settings</a><ol class="toc-level toc-level-4"><li class="toc-item toc-item-h5"><a class="toc-link toc-link-h5" href="#wild-card-settings">Wild card settings</a></li></ol></li></ol></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#search-settings">Search settings</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#line-number">Line number</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#miscellaneous-settings">Miscellaneous settings</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#the-essential-plugins">The Essential Plugins</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#vundle---the-package-manager">Vundle - the package manager</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#vim-airline---the-informative-interface">Vim Airline - the informative interface</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#ultisnip---programmable-snippet-insertion">Ultisnip - Programmable snippet insertion</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#the-nice-plugins">The Nice plugins</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#tabular---aligning-on-characters">Tabular - Aligning on characters</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#nerdtree---displaying-the-directory-structure">NerdTree - Displaying the directory structure</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#youcompleteme---advance-auto-completion-system">YouCompleteMe - Advance auto-completion system</a></li></ol></li></ol>',me,V,Ht=`I guess the best way to say goodbye to vim would be to give a nice list of the
things that I found handy in vim. As always with customizable tools like this,
there is no definitive answer to how to make vim awesome. I would advise you to
look at some basic <code>vimrc</code> settings and browse through <a href="http://vimawesome.com/" rel="nofollow">vim
awesome</a> to find the things that make your vim
workflow work best for you!`,de,u,Tt='<a aria-hidden="true" tabindex="-1" href="#general-recommendations"><span class="icon icon-link"></span></a>General recommendations',he,A,Ct=`For those who are still getting familiar with vim, the <a href="http://www.openvim.com/" rel="nofollow">interactive vim
tutorial</a> is a good place to get started with the
basic commands.`,ve,j,Mt=`<li>For general recommendation on the vimrc file, checkout the <a href="http://vim.wikia.com/wiki/Example_vimrc" rel="nofollow">vim wiki
page</a>.</li> <li>For a list of commonly used plugins, see <a href="http://vimawesome.com/" rel="nofollow">vim
awesome</a>.</li> <li>For in depth tutorials on popular vim plugins and vim scripting, check out
<a href="http://vimcasts.org/" rel="nofollow">Vim cast</a></li>`,fe,m,Lt='<a aria-hidden="true" tabindex="-1" href="#configuring-vim"><span class="icon icon-link"></span></a>Configuring Vim',be,D,_t="As my brother said:",ye,z,qt=`<p>Vim is not just a program, it is a standard to which people compare what one
could expect out of their text editors</p>`,ke,U,It=`So vim is not the “Real men use h-j-k-l” elitist BS that some people like to
say, but what is possible in the text editor: Custom key-mapping, macros, block
editing, keystroke recording… etc. The true power of vim is not in what you
get directly out of the box, but what is potentially possible by the vim
configuration settings via the <code>~/.vimrc</code> file. In addition to the powerful
engines already given to you by vim (regex, syntax/file-type awareness…etc.),
the configuration is programmable, so that you could shape vim to suit your own
specific needs.`,we,ge,xe,d,Pt='<a aria-hidden="true" tabindex="-1" href="#my-vimrc-settings"><span class="icon icon-link"></span></a>My <code>vimrc</code> settings',He,R,Ft=`Here is the list of options that I have activated to improve the overall typing
experience. If you are highly into text based stuff, I highly recommend
checking out some of the options (and related) below to find what works the
best for you!`,Te,h,St='<a aria-hidden="true" tabindex="-1" href="#indention-settings"><span class="icon icon-link"></span></a>Indention settings',Ce,E,Vt=`Indention is the simplest way of keeping maintaining appearance in text files,
so might as well life easier`,Me,v,At=`<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>set tabstop=3       &quot;&quot; Setting indention width</span></span>
<span class="line"><span>set shiftwidth=3</span></span>
<span class="line"><span>set expandtab       &quot;&quot; Replacing tab with spaces</span></span>
<span class="line"><span>set smarttab        &quot;&quot; Use tab instead of spaces</span></span>
<span class="line"><span>set autoindent      &quot;&quot; Indenting to current indention levle on new line input</span></span></code></pre></div>`,Le,f,jt='<a aria-hidden="true" tabindex="-1" href="#wild-card-settings"><span class="icon icon-link"></span></a>Wild card settings',_e,W,Dt=`Finding files should be left to the computer, not the user. Open files with
command line like auto complete`,qe,b,zt=`<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>set wildmenu                &quot;&quot; Enable wild card</span></span>
<span class="line"><span>set wildmode=longest,full   &quot;&quot; Set to autocomplete to the longest prefix</span></span>
<span class="line"><span>set wildignore+=*.a,*.o     &quot;&quot; Setting to ignore non-textbased extensions</span></span>
<span class="line"><span>set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png</span></span>
<span class="line"><span>set wildignore+=.DS_Store,.git,.hg,.svn</span></span>
<span class="line"><span>set wildignore+=*~,*.swp,*.tmp</span></span></code></pre></div>`,Ie,y,Ut='<a aria-hidden="true" tabindex="-1" href="#search-settings"><span class="icon icon-link"></span></a>Search settings',Pe,G,Rt="Settings I found when I just into vim, molded my workflow around them…",Fe,k,Et=`<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>set showmatch   &quot;&quot; Automatically move cursor to next results position</span></span>
<span class="line"><span>set hlsearch    &quot;&quot; Highlight search results</span></span>
<span class="line"><span>set incsearch</span></span>
<span class="line"><span>set ignorecase  &quot;&quot; Ignore upper/lower-case different when searching all under-case</span></span>
<span class="line"><span>set smartcase   &quot;&quot; Case-dependent search when search query includes uppercase or regex</span></span></code></pre></div>`,Se,w,Wt='<a aria-hidden="true" tabindex="-1" href="#line-number"><span class="icon icon-link"></span></a>Line number',Ve,N,Gt="Let vim display the line number.",Ae,g,Nt=`<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>set number            &quot;&quot; Display linenumber</span></span>
<span class="line"><span>set relativenumber    &quot;&quot; Show linenumber relative tu cursor</span></span>
<span class="line"><span>set numberwidth=4     &quot;&quot; Width of numberline column</span></span></code></pre></div>`,je,x,Bt='<a aria-hidden="true" tabindex="-1" href="#miscellaneous-settings"><span class="icon icon-link"></span></a>Miscellaneous settings',De,B,Ot="Other settings",ze,H,Yt=`<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>set showcmd                   &quot;&quot; Show input commands at bottom of screen</span></span>
<span class="line"><span>set backspace=2               &quot;&quot; Allow backspace across new-line</span></span>
<span class="line"><span>set formatoptions=c,q,r,t</span></span>
<span class="line"><span>set ruler                     &quot;&quot; Display cursor position</span></span>
<span class="line"><span>set background=dark           &quot;&quot; Choose color scheme for dark background</span></span>
<span class="line"><span>set mouse=a                   &quot;&quot; Enable mouse interaction</span></span>
<span class="line"><span>set shell=zsh\\ --login        &quot;&quot; Set shell command environment to match regular terminal</span></span></code></pre></div>`,Ue,O,Kt=`Note that syntax highlighting would require <code>filetype on</code>, but we need to set
up the plugin manager first.`,Re,Ee,We,T,Qt='<a aria-hidden="true" tabindex="-1" href="#the-essential-plugins"><span class="icon icon-link"></span></a>The Essential Plugins',Ge,Y,Jt=`Though I say that vim configuration, I haven’t actually written any vim scripts
myself, you could find a nice tutorial
<a href="http://learnvimscriptthehardway.stevelosh.com/" rel="nofollow">here</a> though. What I do use
are the plugins that are already written by others and do minor settings to
make it look better. For a nice list of available and actively maintained
plugins, check out <a href="https://vimawesome.org" rel="nofollow">vim awesome</a>.`,Ne,K,Xt=`The following plugins listed below is what I consider to be essential in my
workflow, and editing in vim simply wouldn’t be the same without.`,Be,C,Zt='<a aria-hidden="true" tabindex="-1" href="#vundle---the-package-manager"><span class="icon icon-link"></span></a>Vundle - the package manager',Oe,Q,$t=`A package manager that is simple to use and maintain. To use it add the
following lines to vimrc`,Ye,M,ei=`<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>set nocompatible</span></span>
<span class="line"><span>filetype off</span></span>
<span class="line"><span>set rtp+=~/.vim/bundle/Vundle.vim</span></span>
<span class="line"><span>call vundle#begin()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Plugin &#39;gmarik/Vundle.vim&#39;</span></span>
<span class="line"><span>&quot;&quot;&quot; Add pacakges like [github_user]/[repository name]</span></span>
<span class="line"><span>call vundle#end()</span></span>
<span class="line"><span>filetype on</span></span>
<span class="line"><span>filetype plugin on</span></span>
<span class="line"><span>filetype indent on</span></span></code></pre></div>`,Ke,J,ti=`The lines that need to be added to vim could be directly found on
<a href="https://vimawesome.org" rel="nofollow">vimawesome</a>.`,Qe,L,ii='<a aria-hidden="true" tabindex="-1" href="#vim-airline---the-informative-interface"><span class="icon icon-link"></span></a>Vim Airline - the informative interface',Je,X,ni=`During editing, you might want to get some useful information about your
editing conditions, like your operation mode, the path of the file you are
editing, the tabs you have opened, the git branch, the cursor position… etc.`,Xe,Z,si='<img src="http://gdriv.es/ensc_github/vim_airline.png"/> <figcaption>A nice interface display!</figcaption>',Ze,$,li=`While all of this information is available by the vim command line, this
package makes is possible to choose the information you are typically
interested and display it in a consistence and pretty way!`,$e,ee,ai=`To use add <code>Plugin &#39;bling/air-line&#39;</code> to the plugin lines, for the better fonts,
you might want to install the <a href="https://powerline.readthedocs.org/en/master/installation/linux.html" rel="nofollow">powerline
fonts</a> to you
fonts (system or otherwise).`,et,_,oi='<a aria-hidden="true" tabindex="-1" href="#ultisnip---programmable-snippet-insertion"><span class="icon icon-link"></span></a>Ultisnip - Programmable snippet insertion',tt,te,pi=`In coding there are typically patterns that will occur over and over again
(Class declaration, tags, loops and ifs, comment blocks…) Snippets allow you
to add inputs by simple inputs and string substitution so that you don’t need
to key class names multiple times. What’s more, the output could be programmable
by python to change based on your input in various sections!`,it,ie,ci='<img src="https://camo.githubusercontent.com/296aecf30e1607233814196db6bd3f5f47e70c73/68747470733a2f2f7261772e6769746875622e636f6d2f5369725665722f756c7469736e6970732f6d61737465722f646f632f64656d6f2e676966"/> <figcaption>Ultisnip in action!</figcaption>',nt,ne,ri=`To use add <code>Plugin &#39;SirVer/ultisnips&#39;</code> to the plugins lines. See the GitHub
page Readme.md for examples on programmable snippets!`,st,se,ui=`My little test script was to make a separator comment what is easy to type!
(For on how this is achieved, see my <a href="https://github.com/yimuchen/UnixConfig/blob/master/vim/UltiSnips/cpp.snippets" rel="nofollow">GitHub
repository</a>)`,lt,q,mi=`<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>//----- This is a seperator -------------------------------------------</span></span>
<span class="line"><span>dummy_code = a ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//----- This is also seperator, with more test ------------------------</span></span>
<span class="line"><span>dummy_code = b ;</span></span></code></pre></div>`,at,le,di=`This is the feature that I miss the most about vim when migrating to
<a href="https://atom.io" rel="nofollow">atom</a>, The snippet system in atom simply isn’t mature enough,
and In my nearly two years in vim I have accumulated some snippets that is a
bit annoying to port into atom’s <code>cson</code> format.`,ot,pt,ct,I,hi='<a aria-hidden="true" tabindex="-1" href="#the-nice-plugins"><span class="icon icon-link"></span></a>The Nice plugins',rt,ae,vi=`The following are packages that ones that are not commonly used in everyday
workflow, But is nice to have around.`,ut,P,fi='<a aria-hidden="true" tabindex="-1" href="#tabular---aligning-on-characters"><span class="icon icon-link"></span></a>Tabular - Aligning on characters',mt,oe,bi=`In the code I’m helping to maintain, there are usually long sections of
declaration and assignment, and it helps with my sanity if I could align my
code by the <code>=</code> operator or other aspects strings in the code!`,dt,pe,yi=`Add the line <code>Plugin &#39;godlygeek/tabular&#39;</code> to use this plugin, and check out the
<a href="http://vimcasts.org/episodes/aligning-text-with-tabular-vim/" rel="nofollow">vim cast video</a>
to see how to use it!`,ht,F,ki='<a aria-hidden="true" tabindex="-1" href="#nerdtree---displaying-the-directory-structure"><span class="icon icon-link"></span></a>NerdTree - Displaying the directory structure',vt,ce,wi=`Since vim is command line based and a lot of the work flow would be based
around paths, it would be nice that the user could get a display of the
directory structure if ever needed to be referenced. Since my discovery of the
<code>tree</code> command, this task is typically managed via command line. But I do like
my some interface open when I work.`,ft,S,gi='<a aria-hidden="true" tabindex="-1" href="#youcompleteme---advance-auto-completion-system"><span class="icon icon-link"></span></a>YouCompleteMe - Advance auto-completion system',bt,re,xi=`This is a syntax aware, content aware, fuzzy matching auto-completion system.
This plugin is a bit hard to recommend: it’s heavy, sluggish with large files,
and has a lot of dependencies if you want it to work with self-defined C++
functions. But it works well with a number of other plugins (Ultisnip via
supertab), and simply works with most of the stuff I expect from an
auto-completions system.`,yt,kt,wt,ue,Hi=`Well, that is that. Since vim will survive in my main program as a system file
editor, most of the heavier plugins will be disabled (ultisnip and
YouCompleteMe). If you want to use vim as your primary text editor for general
purpose text related tasks, I highly recommend checking out the settings that I
have used above!`;return{c(){r=s("nav"),r.innerHTML=xt,me=a(),V=s("p"),V.innerHTML=Ht,de=a(),u=s("h2"),u.innerHTML=Tt,he=a(),A=s("p"),A.innerHTML=Ct,ve=a(),j=s("ul"),j.innerHTML=Mt,fe=a(),m=s("h2"),m.innerHTML=Lt,be=a(),D=s("p"),D.textContent=_t,ye=a(),z=s("blockquote"),z.innerHTML=qt,ke=a(),U=s("p"),U.innerHTML=It,we=a(),ge=s("hr"),xe=a(),d=s("h3"),d.innerHTML=Pt,He=a(),R=s("p"),R.textContent=Ft,Te=a(),h=s("h4"),h.innerHTML=St,Ce=a(),E=s("p"),E.textContent=Vt,Me=a(),v=s("div"),v.innerHTML=At,Le=a(),f=s("h5"),f.innerHTML=jt,_e=a(),W=s("p"),W.textContent=Dt,qe=a(),b=s("div"),b.innerHTML=zt,Ie=a(),y=s("h3"),y.innerHTML=Ut,Pe=a(),G=s("p"),G.textContent=Rt,Fe=a(),k=s("div"),k.innerHTML=Et,Se=a(),w=s("h3"),w.innerHTML=Wt,Ve=a(),N=s("p"),N.textContent=Gt,Ae=a(),g=s("div"),g.innerHTML=Nt,je=a(),x=s("h3"),x.innerHTML=Bt,De=a(),B=s("p"),B.textContent=Ot,ze=a(),H=s("div"),H.innerHTML=Yt,Ue=a(),O=s("p"),O.innerHTML=Kt,Re=a(),Ee=s("hr"),We=a(),T=s("h2"),T.innerHTML=Qt,Ge=a(),Y=s("p"),Y.innerHTML=Jt,Ne=a(),K=s("p"),K.textContent=Xt,Be=a(),C=s("h3"),C.innerHTML=Zt,Oe=a(),Q=s("p"),Q.textContent=$t,Ye=a(),M=s("div"),M.innerHTML=ei,Ke=a(),J=s("p"),J.innerHTML=ti,Qe=a(),L=s("h3"),L.innerHTML=ii,Je=a(),X=s("p"),X.textContent=ni,Xe=a(),Z=s("figure"),Z.innerHTML=si,Ze=a(),$=s("p"),$.textContent=li,$e=a(),ee=s("p"),ee.innerHTML=ai,et=a(),_=s("h3"),_.innerHTML=oi,tt=a(),te=s("p"),te.textContent=pi,it=a(),ie=s("figure"),ie.innerHTML=ci,nt=a(),ne=s("p"),ne.innerHTML=ri,st=a(),se=s("p"),se.innerHTML=ui,lt=a(),q=s("div"),q.innerHTML=mi,at=a(),le=s("p"),le.innerHTML=di,ot=a(),pt=s("hr"),ct=a(),I=s("h2"),I.innerHTML=hi,rt=a(),ae=s("p"),ae.textContent=vi,ut=a(),P=s("h3"),P.innerHTML=fi,mt=a(),oe=s("p"),oe.innerHTML=bi,dt=a(),pe=s("p"),pe.innerHTML=yi,ht=a(),F=s("h3"),F.innerHTML=ki,vt=a(),ce=s("p"),ce.innerHTML=wi,ft=a(),S=s("h3"),S.innerHTML=gi,bt=a(),re=s("p"),re.textContent=xi,yt=a(),kt=s("hr"),wt=a(),ue=s("p"),ue.textContent=Hi,this.h()},l(e){r=l(e,"NAV",{class:!0,"data-svelte-h":!0}),p(r)!=="svelte-1raczg9"&&(r.innerHTML=xt),me=o(e),V=l(e,"P",{"data-svelte-h":!0}),p(V)!=="svelte-8o4reb"&&(V.innerHTML=Ht),de=o(e),u=l(e,"H2",{id:!0,"data-svelte-h":!0}),p(u)!=="svelte-fl4s2a"&&(u.innerHTML=Tt),he=o(e),A=l(e,"P",{"data-svelte-h":!0}),p(A)!=="svelte-1l58bxo"&&(A.innerHTML=Ct),ve=o(e),j=l(e,"UL",{"data-svelte-h":!0}),p(j)!=="svelte-3jhopu"&&(j.innerHTML=Mt),fe=o(e),m=l(e,"H2",{id:!0,"data-svelte-h":!0}),p(m)!=="svelte-157vjh1"&&(m.innerHTML=Lt),be=o(e),D=l(e,"P",{"data-svelte-h":!0}),p(D)!=="svelte-xaroml"&&(D.textContent=_t),ye=o(e),z=l(e,"BLOCKQUOTE",{"data-svelte-h":!0}),p(z)!=="svelte-1uca8pq"&&(z.innerHTML=qt),ke=o(e),U=l(e,"P",{"data-svelte-h":!0}),p(U)!=="svelte-c38g3q"&&(U.innerHTML=It),we=o(e),ge=l(e,"HR",{}),xe=o(e),d=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(d)!=="svelte-5mjv8h"&&(d.innerHTML=Pt),He=o(e),R=l(e,"P",{"data-svelte-h":!0}),p(R)!=="svelte-7y51as"&&(R.textContent=Ft),Te=o(e),h=l(e,"H4",{id:!0,"data-svelte-h":!0}),p(h)!=="svelte-nr01ub"&&(h.innerHTML=St),Ce=o(e),E=l(e,"P",{"data-svelte-h":!0}),p(E)!=="svelte-1qf4mir"&&(E.textContent=Vt),Me=o(e),v=l(e,"DIV",{class:!0,"data-svelte-h":!0}),p(v)!=="svelte-14bg2mc"&&(v.innerHTML=At),Le=o(e),f=l(e,"H5",{id:!0,"data-svelte-h":!0}),p(f)!=="svelte-uonhk7"&&(f.innerHTML=jt),_e=o(e),W=l(e,"P",{"data-svelte-h":!0}),p(W)!=="svelte-vn8dqw"&&(W.textContent=Dt),qe=o(e),b=l(e,"DIV",{class:!0,"data-svelte-h":!0}),p(b)!=="svelte-z8t9x3"&&(b.innerHTML=zt),Ie=o(e),y=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(y)!=="svelte-dbmt49"&&(y.innerHTML=Ut),Pe=o(e),G=l(e,"P",{"data-svelte-h":!0}),p(G)!=="svelte-rh2rww"&&(G.textContent=Rt),Fe=o(e),k=l(e,"DIV",{class:!0,"data-svelte-h":!0}),p(k)!=="svelte-1iot8hs"&&(k.innerHTML=Et),Se=o(e),w=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(w)!=="svelte-ljld1v"&&(w.innerHTML=Wt),Ve=o(e),N=l(e,"P",{"data-svelte-h":!0}),p(N)!=="svelte-oh1crl"&&(N.textContent=Gt),Ae=o(e),g=l(e,"DIV",{class:!0,"data-svelte-h":!0}),p(g)!=="svelte-8xy55"&&(g.innerHTML=Nt),je=o(e),x=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(x)!=="svelte-9l8p8r"&&(x.innerHTML=Bt),De=o(e),B=l(e,"P",{"data-svelte-h":!0}),p(B)!=="svelte-e6u579"&&(B.textContent=Ot),ze=o(e),H=l(e,"DIV",{class:!0,"data-svelte-h":!0}),p(H)!=="svelte-a3npha"&&(H.innerHTML=Yt),Ue=o(e),O=l(e,"P",{"data-svelte-h":!0}),p(O)!=="svelte-10w0w3g"&&(O.innerHTML=Kt),Re=o(e),Ee=l(e,"HR",{}),We=o(e),T=l(e,"H2",{id:!0,"data-svelte-h":!0}),p(T)!=="svelte-1fhembh"&&(T.innerHTML=Qt),Ge=o(e),Y=l(e,"P",{"data-svelte-h":!0}),p(Y)!=="svelte-1hpx1so"&&(Y.innerHTML=Jt),Ne=o(e),K=l(e,"P",{"data-svelte-h":!0}),p(K)!=="svelte-vjoarg"&&(K.textContent=Xt),Be=o(e),C=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(C)!=="svelte-1b8gl8v"&&(C.innerHTML=Zt),Oe=o(e),Q=l(e,"P",{"data-svelte-h":!0}),p(Q)!=="svelte-1fnms2w"&&(Q.textContent=$t),Ye=o(e),M=l(e,"DIV",{class:!0,"data-svelte-h":!0}),p(M)!=="svelte-txtfo9"&&(M.innerHTML=ei),Ke=o(e),J=l(e,"P",{"data-svelte-h":!0}),p(J)!=="svelte-pkth0d"&&(J.innerHTML=ti),Qe=o(e),L=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(L)!=="svelte-1o3nk55"&&(L.innerHTML=ii),Je=o(e),X=l(e,"P",{"data-svelte-h":!0}),p(X)!=="svelte-n8ouw7"&&(X.textContent=ni),Xe=o(e),Z=l(e,"FIGURE",{"data-svelte-h":!0}),p(Z)!=="svelte-lsxisz"&&(Z.innerHTML=si),Ze=o(e),$=l(e,"P",{"data-svelte-h":!0}),p($)!=="svelte-j9r8s0"&&($.textContent=li),$e=o(e),ee=l(e,"P",{"data-svelte-h":!0}),p(ee)!=="svelte-fzllz"&&(ee.innerHTML=ai),et=o(e),_=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(_)!=="svelte-1kufhbk"&&(_.innerHTML=oi),tt=o(e),te=l(e,"P",{"data-svelte-h":!0}),p(te)!=="svelte-1yx4w0k"&&(te.textContent=pi),it=o(e),ie=l(e,"FIGURE",{"data-svelte-h":!0}),p(ie)!=="svelte-1uy781r"&&(ie.innerHTML=ci),nt=o(e),ne=l(e,"P",{"data-svelte-h":!0}),p(ne)!=="svelte-1t9gvjj"&&(ne.innerHTML=ri),st=o(e),se=l(e,"P",{"data-svelte-h":!0}),p(se)!=="svelte-zr65xo"&&(se.innerHTML=ui),lt=o(e),q=l(e,"DIV",{class:!0,"data-svelte-h":!0}),p(q)!=="svelte-edcv9w"&&(q.innerHTML=mi),at=o(e),le=l(e,"P",{"data-svelte-h":!0}),p(le)!=="svelte-p6iap2"&&(le.innerHTML=di),ot=o(e),pt=l(e,"HR",{}),ct=o(e),I=l(e,"H2",{id:!0,"data-svelte-h":!0}),p(I)!=="svelte-si3pdw"&&(I.innerHTML=hi),rt=o(e),ae=l(e,"P",{"data-svelte-h":!0}),p(ae)!=="svelte-1tukg37"&&(ae.textContent=vi),ut=o(e),P=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(P)!=="svelte-ura3oq"&&(P.innerHTML=fi),mt=o(e),oe=l(e,"P",{"data-svelte-h":!0}),p(oe)!=="svelte-je45ni"&&(oe.innerHTML=bi),dt=o(e),pe=l(e,"P",{"data-svelte-h":!0}),p(pe)!=="svelte-6d72j5"&&(pe.innerHTML=yi),ht=o(e),F=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(F)!=="svelte-1nbhh1l"&&(F.innerHTML=ki),vt=o(e),ce=l(e,"P",{"data-svelte-h":!0}),p(ce)!=="svelte-96s8d"&&(ce.innerHTML=wi),ft=o(e),S=l(e,"H3",{id:!0,"data-svelte-h":!0}),p(S)!=="svelte-1f3jbkg"&&(S.innerHTML=gi),bt=o(e),re=l(e,"P",{"data-svelte-h":!0}),p(re)!=="svelte-1qeimrz"&&(re.textContent=xi),yt=o(e),kt=l(e,"HR",{}),wt=o(e),ue=l(e,"P",{"data-svelte-h":!0}),p(ue)!=="svelte-fs7p74"&&(ue.textContent=Hi),this.h()},h(){c(r,"class","toc"),c(u,"id","general-recommendations"),c(m,"id","configuring-vim"),c(d,"id","my-vimrc-settings"),c(h,"id","indention-settings"),c(v,"class","code-block-container"),c(f,"id","wild-card-settings"),c(b,"class","code-block-container"),c(y,"id","search-settings"),c(k,"class","code-block-container"),c(w,"id","line-number"),c(g,"class","code-block-container"),c(x,"id","miscellaneous-settings"),c(H,"class","code-block-container"),c(T,"id","the-essential-plugins"),c(C,"id","vundle---the-package-manager"),c(M,"class","code-block-container"),c(L,"id","vim-airline---the-informative-interface"),c(_,"id","ultisnip---programmable-snippet-insertion"),c(q,"class","code-block-container"),c(I,"id","the-nice-plugins"),c(P,"id","tabular---aligning-on-characters"),c(F,"id","nerdtree---displaying-the-directory-structure"),c(S,"id","youcompleteme---advance-auto-completion-system")},m(e,t){i(e,r,t),i(e,me,t),i(e,V,t),i(e,de,t),i(e,u,t),i(e,he,t),i(e,A,t),i(e,ve,t),i(e,j,t),i(e,fe,t),i(e,m,t),i(e,be,t),i(e,D,t),i(e,ye,t),i(e,z,t),i(e,ke,t),i(e,U,t),i(e,we,t),i(e,ge,t),i(e,xe,t),i(e,d,t),i(e,He,t),i(e,R,t),i(e,Te,t),i(e,h,t),i(e,Ce,t),i(e,E,t),i(e,Me,t),i(e,v,t),i(e,Le,t),i(e,f,t),i(e,_e,t),i(e,W,t),i(e,qe,t),i(e,b,t),i(e,Ie,t),i(e,y,t),i(e,Pe,t),i(e,G,t),i(e,Fe,t),i(e,k,t),i(e,Se,t),i(e,w,t),i(e,Ve,t),i(e,N,t),i(e,Ae,t),i(e,g,t),i(e,je,t),i(e,x,t),i(e,De,t),i(e,B,t),i(e,ze,t),i(e,H,t),i(e,Ue,t),i(e,O,t),i(e,Re,t),i(e,Ee,t),i(e,We,t),i(e,T,t),i(e,Ge,t),i(e,Y,t),i(e,Ne,t),i(e,K,t),i(e,Be,t),i(e,C,t),i(e,Oe,t),i(e,Q,t),i(e,Ye,t),i(e,M,t),i(e,Ke,t),i(e,J,t),i(e,Qe,t),i(e,L,t),i(e,Je,t),i(e,X,t),i(e,Xe,t),i(e,Z,t),i(e,Ze,t),i(e,$,t),i(e,$e,t),i(e,ee,t),i(e,et,t),i(e,_,t),i(e,tt,t),i(e,te,t),i(e,it,t),i(e,ie,t),i(e,nt,t),i(e,ne,t),i(e,st,t),i(e,se,t),i(e,lt,t),i(e,q,t),i(e,at,t),i(e,le,t),i(e,ot,t),i(e,pt,t),i(e,ct,t),i(e,I,t),i(e,rt,t),i(e,ae,t),i(e,ut,t),i(e,P,t),i(e,mt,t),i(e,oe,t),i(e,dt,t),i(e,pe,t),i(e,ht,t),i(e,F,t),i(e,vt,t),i(e,ce,t),i(e,ft,t),i(e,S,t),i(e,bt,t),i(e,re,t),i(e,yt,t),i(e,kt,t),i(e,wt,t),i(e,ue,t)},p:gt,i:gt,o:gt,d(e){e&&(n(r),n(me),n(V),n(de),n(u),n(he),n(A),n(ve),n(j),n(fe),n(m),n(be),n(D),n(ye),n(z),n(ke),n(U),n(we),n(ge),n(xe),n(d),n(He),n(R),n(Te),n(h),n(Ce),n(E),n(Me),n(v),n(Le),n(f),n(_e),n(W),n(qe),n(b),n(Ie),n(y),n(Pe),n(G),n(Fe),n(k),n(Se),n(w),n(Ve),n(N),n(Ae),n(g),n(je),n(x),n(De),n(B),n(ze),n(H),n(Ue),n(O),n(Re),n(Ee),n(We),n(T),n(Ge),n(Y),n(Ne),n(K),n(Be),n(C),n(Oe),n(Q),n(Ye),n(M),n(Ke),n(J),n(Qe),n(L),n(Je),n(X),n(Xe),n(Z),n(Ze),n($),n($e),n(ee),n(et),n(_),n(tt),n(te),n(it),n(ie),n(nt),n(ne),n(st),n(se),n(lt),n(q),n(at),n(le),n(ot),n(pt),n(ct),n(I),n(rt),n(ae),n(ut),n(P),n(mt),n(oe),n(dt),n(pe),n(ht),n(F),n(vt),n(ce),n(ft),n(S),n(bt),n(re),n(yt),n(kt),n(wt),n(ue))}}}const Pi={title:"Making Vim Awesome",description:"Tips and tricks for making Vim Awesome",tags:["vim","computing","tips"],banner:"thoughts.jpg"};class Fi extends Mi{constructor(r){super(),Li(this,r,null,_i,Ci,{})}}export{Fi as default,Pi as metadata};
