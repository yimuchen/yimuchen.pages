import{s as we,n as se}from"./scheduler.D8jTWijz.js";import{S as Te,i as Ce,e as a,s as i,c as l,g as o,a as c,b as r,d as n,f as t}from"./index.CNPTuR7J.js";function Me(Ae){let p,ne='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#the-diamond-problem">The Diamond Problem</a></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#the-missing-vtable-error-message">The missing vtable error message</a></li></ol>',B,b,te=`I have recently tried to practice designing more general purpose classes for my
analysis. Conceptualizing the concept object itself is difficult enough: one
needs to avoid both being specific and too general, but over these days of
experience with C++‘s more obscure syntax and quirks, I really began to see why
some might not consider C++ a complete object-oriented programming language.`,I,d,ae='<a aria-hidden="true" tabindex="-1" href="#the-diamond-problem"><span class="icon icon-link"></span></a>The Diamond Problem',P,E,le=`One handy way of avoiding repeated code is by class inheritance, so when you
want to merge the functionality of two classes <code>B</code> and <code>C</code>, one might build an
inherited class <code>D</code> that inherits both <code>B</code> and <code>C</code>:`,j,y,oe=`<div class="code-block-header">Simple multiple inheritance <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2"> {};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2"> {};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">D</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2">{};</span></span></code></pre></div>`,q,x,ie="But now a problem arises if <code>B</code> and <code>C</code> has a common ancestor, say class <code>A</code>:",V,F,ce=`<div class="code-block-header">Diamon multiple inheritance <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2"> { </span><span style="color:#66D9EF;font-style:italic">public:</span><span style="color:#66D9EF;font-style:italic"> int</span><span style="color:#F8F8F2"> x;};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2">{};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2">{};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">D</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2">{};</span></span></code></pre></div>`,S,k,pe=`Because when we create an instance of object <code>D</code>, we create an instance of
object <code>B</code> and <code>C</code>, which respectively creates and instance of object <code>A</code>. So
when we write: <code>C.x</code>, are we referring to the instance <code>C::A::D.x</code> or
<code>C::B::D.x</code>? Such is known as the <a href="https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem" rel="nofollow">diamond
problem</a>,
or the <a href="http://objectmentor.com/resources/articles/javacpp.pdf" rel="nofollow">deadly diamond of
death</a>`,z,g,re='<a href="https://en.wikipedia.org/wiki/Multiple_inheritance"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Diamond_inheritance.svg/180px-Diamond_inheritance.svg.png" alt=""/></a> <figcaption><a href="https://commons.wikimedia.org/w/index.php?curid=1015688">Dependency diagram of diamond problem - By RokerHRO</a></figcaption>',O,D,de=`Each program has their own approach to solving this problem. In C++, we require
that at least one of the intermediate classes to be “virtually inherited”, so
that extended classes <code>D</code> will only create one instance on grandparent class
<code>A</code>:`,R,u,ye=`<div class="code-block-header">Virtual inheritance <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2"> { </span><span style="color:#66D9EF;font-style:italic">public:</span><span style="color:#66D9EF;font-style:italic"> int</span><span style="color:#F8F8F2"> x;};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">virtual</span><span style="color:#66D9EF;font-style:italic"> public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2">{};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">virtual</span><span style="color:#66D9EF;font-style:italic"> public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2">{};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">D</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2">{};</span></span></code></pre></div>`,N,A,Fe=`In the cases that simple inheritance and virtual inheritance at mixed and
matched, the non-virtually inherited instances create independent instances of
base class <code>A</code>, and explicit paths are used expressed access:`,U,h,ue=`<div class="code-block-header">Example of multiple inheritance <span class="code-block-lang">[cpp]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2"> { </span><span style="color:#66D9EF;font-style:italic">public:</span><span style="color:#66D9EF;font-style:italic"> int</span><span style="color:#F8F8F2"> x;};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">virtual</span><span style="color:#66D9EF;font-style:italic"> public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2">{ </span><span style="color:#66D9EF;font-style:italic">public:</span><span style="color:#66D9EF;font-style:italic"> int</span><span style="color:#F8F8F2"> b; };</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">virtual</span><span style="color:#66D9EF;font-style:italic"> public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2">{ </span><span style="color:#66D9EF;font-style:italic">public:</span><span style="color:#66D9EF;font-style:italic"> int</span><span style="color:#F8F8F2"> c; };</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">E</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">A</span><span style="color:#F8F8F2">{ </span><span style="color:#66D9EF;font-style:italic">public:</span><span style="color:#66D9EF;font-style:italic"> int</span><span style="color:#F8F8F2"> e ; };</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">D</span><span style="color:#F8F8F2"> : </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">B</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">C</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">public</span><span> </span><span style="color:#A6E22E;text-decoration:underline">E</span><span style="color:#F8F8F2">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">D d;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">d.x </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> d.b </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> d.c </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> d.e;</span><span style="color:#88846F"> // All Legal variables</span></span>
<span class="line"><span style="color:#A6E22E;text-decoration:underline">d</span><span style="color:#F8F8F2">::B.x;</span><span style="color:#88846F"> // Equivalent to d.x</span></span>
<span class="line"><span style="color:#A6E22E;text-decoration:underline">d</span><span style="color:#F8F8F2">::A.x;</span><span style="color:#88846F"> // Equivalent to d.x</span></span>
<span class="line"><span style="color:#A6E22E;text-decoration:underline">d</span><span style="color:#F8F8F2">::E.x;</span><span style="color:#88846F"> // An Independent variable to the one above!</span></span></code></pre></div>`,W,w,he=`While this does give most of the flexibility to the user as to what variables
are used in an extended inheritance class, this still poses some issues: Since
a virtual instance of grandparent class exists, the grandchild class has to
explicitly call grandparent constructor for initialization (unless an
argument-less constructor exists). While it seems like a minor feature, it
still means that abstraction in not as “opaque” as it should be. For instance,
Python tackles this problem by guessing the meaning of <code>d.x</code> by the inheritance
order during the declaration <code>class D(B,C,E):</code>, with the rule of thumb being
“First found in DSF searching” and allowing syntax for hierarchy shifting,
which makes class design much more intuitive.`,G,f,fe='<a aria-hidden="true" tabindex="-1" href="#the-missing-vtable-error-message"><span class="icon icon-link"></span></a>The missing <code>vtable</code> error message',J,T,me="One of the most infuriating compile error messages in <code>g++4.9.3</code> is:",K,m,ve=`<div class="code-block-header"><span class="code-block-lang">[plaintext]</span></div> <div class="code-block "><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>In function &lt;class&gt;::&lt;constructor&gt;</span></span>
<span class="line"><span>undefined reference to vtable for &lt;class&gt;</span></span></code></pre></div>`,Q,C,be=`As it is annoying uninformative as to what is missing. A simplified view of the
<code>vtable</code> (or virtual table) is a table of virtual methods that the compiler
generates for a class, which is then linked for each class in an inheritance
hierarchy. Missing <code>vtable</code> may be caused by the following issues:`,X,M,Ee=`<li>The file containing the <code>vtable</code> was not included for linking.</li> <li>The <code>vtable</code> was not generated. For a <code>vtable</code> to be generated, the all
instances of reimplemented virtual functions to exists.</li>`,Y,H,xe=`Most of the time, when a method is missing, the following error message is much
more informative:`,Z,v,ke='<div class="code-block-header"><span class="code-block-lang">[plaintext]</span></div> <div class="code-block "><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>Error: undefined reference to &lt;class&gt;::&lt;method&gt;(&lt;arguments&gt;)</span></span></code></pre></div>',$,L,ge=`But in the case of methods related to the <code>vtable</code> generation, the error
messages for missing methods is all compacted into a <code>missing vtable</code> and send
to look for bugs in the constructor. Not only are you not-told where you bug
might be, but it actively tells you to look for somewhere where the bug isn’t.`,ee,_,De=`I know that the error messages have been greatly improved in <code>g++6.1</code>. But
working in a collaboration, I don’t have the luxury to choose which compiler
version I get to use. This is a memo to help me remember what this error
message means and how to avoid it in the future.`;return{c(){p=a("nav"),p.innerHTML=ne,B=i(),b=a("p"),b.textContent=te,I=i(),d=a("h2"),d.innerHTML=ae,P=i(),E=a("p"),E.innerHTML=le,j=i(),y=a("div"),y.innerHTML=oe,q=i(),x=a("p"),x.innerHTML=ie,V=i(),F=a("div"),F.innerHTML=ce,S=i(),k=a("p"),k.innerHTML=pe,z=i(),g=a("figure"),g.innerHTML=re,O=i(),D=a("p"),D.innerHTML=de,R=i(),u=a("div"),u.innerHTML=ye,N=i(),A=a("p"),A.innerHTML=Fe,U=i(),h=a("div"),h.innerHTML=ue,W=i(),w=a("p"),w.innerHTML=he,G=i(),f=a("h2"),f.innerHTML=fe,J=i(),T=a("p"),T.innerHTML=me,K=i(),m=a("div"),m.innerHTML=ve,Q=i(),C=a("p"),C.innerHTML=be,X=i(),M=a("ul"),M.innerHTML=Ee,Y=i(),H=a("p"),H.textContent=xe,Z=i(),v=a("div"),v.innerHTML=ke,$=i(),L=a("p"),L.innerHTML=ge,ee=i(),_=a("p"),_.innerHTML=De,this.h()},l(e){p=l(e,"NAV",{class:!0,"data-svelte-h":!0}),o(p)!=="svelte-qka4hr"&&(p.innerHTML=ne),B=c(e),b=l(e,"P",{"data-svelte-h":!0}),o(b)!=="svelte-d85iwm"&&(b.textContent=te),I=c(e),d=l(e,"H2",{id:!0,"data-svelte-h":!0}),o(d)!=="svelte-155vky2"&&(d.innerHTML=ae),P=c(e),E=l(e,"P",{"data-svelte-h":!0}),o(E)!=="svelte-1dr161x"&&(E.innerHTML=le),j=c(e),y=l(e,"DIV",{class:!0,"data-svelte-h":!0}),o(y)!=="svelte-1s002un"&&(y.innerHTML=oe),q=c(e),x=l(e,"P",{"data-svelte-h":!0}),o(x)!=="svelte-1idh2vd"&&(x.innerHTML=ie),V=c(e),F=l(e,"DIV",{class:!0,"data-svelte-h":!0}),o(F)!=="svelte-1vxugj7"&&(F.innerHTML=ce),S=c(e),k=l(e,"P",{"data-svelte-h":!0}),o(k)!=="svelte-djo103"&&(k.innerHTML=pe),z=c(e),g=l(e,"FIGURE",{"data-svelte-h":!0}),o(g)!=="svelte-dkmkzn"&&(g.innerHTML=re),O=c(e),D=l(e,"P",{"data-svelte-h":!0}),o(D)!=="svelte-17jdori"&&(D.innerHTML=de),R=c(e),u=l(e,"DIV",{class:!0,"data-svelte-h":!0}),o(u)!=="svelte-167f5we"&&(u.innerHTML=ye),N=c(e),A=l(e,"P",{"data-svelte-h":!0}),o(A)!=="svelte-zgiv65"&&(A.innerHTML=Fe),U=c(e),h=l(e,"DIV",{class:!0,"data-svelte-h":!0}),o(h)!=="svelte-t5k050"&&(h.innerHTML=ue),W=c(e),w=l(e,"P",{"data-svelte-h":!0}),o(w)!=="svelte-mtrllc"&&(w.innerHTML=he),G=c(e),f=l(e,"H2",{id:!0,"data-svelte-h":!0}),o(f)!=="svelte-1d18ml"&&(f.innerHTML=fe),J=c(e),T=l(e,"P",{"data-svelte-h":!0}),o(T)!=="svelte-gown1x"&&(T.innerHTML=me),K=c(e),m=l(e,"DIV",{class:!0,"data-svelte-h":!0}),o(m)!=="svelte-1747lwn"&&(m.innerHTML=ve),Q=c(e),C=l(e,"P",{"data-svelte-h":!0}),o(C)!=="svelte-y33pht"&&(C.innerHTML=be),X=c(e),M=l(e,"UL",{"data-svelte-h":!0}),o(M)!=="svelte-1p5kjn2"&&(M.innerHTML=Ee),Y=c(e),H=l(e,"P",{"data-svelte-h":!0}),o(H)!=="svelte-9azn0t"&&(H.textContent=xe),Z=c(e),v=l(e,"DIV",{class:!0,"data-svelte-h":!0}),o(v)!=="svelte-j9hj6"&&(v.innerHTML=ke),$=c(e),L=l(e,"P",{"data-svelte-h":!0}),o(L)!=="svelte-er5cfq"&&(L.innerHTML=ge),ee=c(e),_=l(e,"P",{"data-svelte-h":!0}),o(_)!=="svelte-15xyktn"&&(_.innerHTML=De),this.h()},h(){r(p,"class","toc"),r(d,"id","the-diamond-problem"),r(y,"class","code-block-container"),r(F,"class","code-block-container"),r(u,"class","code-block-container"),r(h,"class","code-block-container"),r(f,"id","the-missing-vtable-error-message"),r(m,"class","code-block-container"),r(v,"class","code-block-container")},m(e,s){n(e,p,s),n(e,B,s),n(e,b,s),n(e,I,s),n(e,d,s),n(e,P,s),n(e,E,s),n(e,j,s),n(e,y,s),n(e,q,s),n(e,x,s),n(e,V,s),n(e,F,s),n(e,S,s),n(e,k,s),n(e,z,s),n(e,g,s),n(e,O,s),n(e,D,s),n(e,R,s),n(e,u,s),n(e,N,s),n(e,A,s),n(e,U,s),n(e,h,s),n(e,W,s),n(e,w,s),n(e,G,s),n(e,f,s),n(e,J,s),n(e,T,s),n(e,K,s),n(e,m,s),n(e,Q,s),n(e,C,s),n(e,X,s),n(e,M,s),n(e,Y,s),n(e,H,s),n(e,Z,s),n(e,v,s),n(e,$,s),n(e,L,s),n(e,ee,s),n(e,_,s)},p:se,i:se,o:se,d(e){e&&(t(p),t(B),t(b),t(I),t(d),t(P),t(E),t(j),t(y),t(q),t(x),t(V),t(F),t(S),t(k),t(z),t(g),t(O),t(D),t(R),t(u),t(N),t(A),t(U),t(h),t(W),t(w),t(G),t(f),t(J),t(T),t(K),t(m),t(Q),t(C),t(X),t(M),t(Y),t(H),t(Z),t(v),t($),t(L),t(ee),t(_))}}}const _e={title:"Experiences with Inheritance",description:"Infuriating experiences with classes in C++",tags:["thoughts","computing","c++","recipe"],banner:"code_head_1.png"};class Be extends Te{constructor(p){super(),Ce(this,p,null,Me,we,{})}}export{Be as default,_e as metadata};
