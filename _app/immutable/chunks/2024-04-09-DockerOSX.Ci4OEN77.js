import{s as Ne,n as ce}from"./scheduler.D0k7T8uo.js";import{S as Ye,i as Re,e as l,s as i,c as a,g as o,a as p,b as c,d as t,f as n}from"./index.DKPK4hvO.js";function Xe(qe){let r,re='<ol class="toc-level toc-level-1"><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#tldr-nearly-copy-and-paste-commands">TLDR; nearly copy and paste commands:</a><ol class="toc-level toc-level-2"><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#step-0---checking-the-dependencies">Step 0 - Checking the dependencies</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#step-1---creating-the-base-image">Step 1 - Creating the base image</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#step-2---extracting-the-generated-image">Step 2 - Extracting the generated image</a></li><li class="toc-item toc-item-h3"><a class="toc-link toc-link-h3" href="#step-3---all-subsequent-runs">Step 3 - All subsequent runs</a></li></ol></li><li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#some-additional-information">Some additional information</a></li></ol>',q,_,de=`Keeping some notes for how to run a OSX virtual machine (with GUI) on a Linux
host to test dependencies on OSX systems. The solution is mainly based on the
instructions found in the <a href="https://github.com/sickcodes/Docker-OSX" rel="nofollow">docker-osx</a> repository, which also
powers the main tool for this.`,N,d,ye='<a aria-hidden="true" tabindex="-1" href="#tldr-nearly-copy-and-paste-commands"><span class="icon icon-link"></span></a>TLDR; nearly copy and paste commands:',Y,y,Fe='<a aria-hidden="true" tabindex="-1" href="#step-0---checking-the-dependencies"><span class="icon icon-link"></span></a>Step 0 - Checking the dependencies',R,L,ue='<li><a href="https://docs.docker.com/desktop/install/linux-install/" rel="nofollow"><code>docker</code></a></li> <li><a href="https://wiki.archlinux.org/title/Virt-manager" rel="nofollow"><code>libvirt/virt-manager/qemu</code></a></li> <li><a href="https://wiki.archlinux.org/title/wayland" rel="nofollow">Wayland</a> session (I’m using <a href="https://wiki.archlinux.org/title/KDE" rel="nofollow">Plasma6</a> with wayland for this)</li>',X,x,he=`A copy and paste command from the <a href="https://github.com/sickcodes/Docker-OSX" rel="nofollow">docker-osx</a> repository for all
dependencies other that KDE/wayland, and is listed below (<del>I use Arch BTW</del>)`,U,F,me='<div class="code-block-header"><span class="code-block-lang">[bash]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#A6E22E">sudo</span><span style="color:#E6DB74"> pacman</span><span style="color:#AE81FF"> -S</span><span style="color:#E6DB74"> qemu</span><span style="color:#E6DB74"> libvirt</span><span style="color:#E6DB74"> dnsmasq</span><span style="color:#E6DB74"> virt-manager</span><span style="color:#E6DB74"> bridge-utils</span><span style="color:#E6DB74"> flex</span><span style="color:#E6DB74"> bison</span><span style="color:#E6DB74"> iptables-nft</span><span style="color:#E6DB74"> edk2-ovmf</span></span></code></pre></div>',O,u,Ee='<a aria-hidden="true" tabindex="-1" href="#step-1---creating-the-base-image"><span class="icon icon-link"></span></a>Step 1 - Creating the base image',W,h,ve=`<div class="code-block-header">create base image <span class="code-block-lang">[bash]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#A6E22E">docker</span><span style="color:#E6DB74"> run</span><span style="color:#AE81FF"> -it</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#AE81FF">    --device</span><span style="color:#E6DB74"> /dev/kvm</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#AE81FF">    -p</span><span style="color:#E6DB74"> 50922:10022</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> GENERATE_UNIQUE=</span><span style="color:#AE81FF">true</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#AE81FF">    -v</span><span style="color:#F8F8F2"> $XDG_RUNTIME_DIR</span><span style="color:#E6DB74">/</span><span style="color:#F8F8F2">$WAYLAND_DISPLAY</span><span style="color:#E6DB74">:/tmp/</span><span style="color:#F8F8F2">$WAYLAND_DISPLAY </span><span style="color:#AE81FF">\\</span></span>
<span class="line"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> WAYLAND_DISPLAY=&quot;\${</span><span style="color:#F8F8F2">WAYLAND_DISPLAY</span><span style="color:#F92672">:-</span><span style="color:#F8F8F2">wayland-0</span><span style="color:#E6DB74">}&quot;</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> DISPLAY=&quot;:1&quot;</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> QT_QPA_PLATFORM=wayland</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> XDG_RUNTIME_DIR=/tmp</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> GDK_BACKEND=wayland</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> CLUTTER_BACKEND=wayland</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> MASTER_PLIST_URL=&#39;https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom-sonoma.plist&#39;</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#E6DB74">    sickcodes/docker-osx:latest</span></span></code></pre></div>`,G,T,Ae=`On running this command, you will be prompted with the OSX installer. Here, you
will need to use the disk erase utility for “erase” the largest disk detected.
Do not worry, the size is just and indication of the free space on the host
system, it will not actually wipe your disk, nor will it actually take up the
remaining free space.`,K,B,De=`<p>Note: when running this command, you may need to run the command as a
privileged docker user (with an additional —privileged flag and running with
sudo). This is not an ideal solution, but is currently being discuess upstream</p>`,$,g,ke=`Then follow the installation instructions, then you should arrive at an useable
GUI after following the instructions to completion.`,z,m,fe='<a aria-hidden="true" tabindex="-1" href="#step-2---extracting-the-generated-image"><span class="icon icon-link"></span></a>Step 2 - Extracting the generated image',Q,w,be="Find the image file corresponding to the hard drive of the OSX.",V,E,_e='<div class="code-block-header"><span class="code-block-lang">[bash]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#A6E22E">sudo</span><span style="color:#E6DB74"> find</span><span style="color:#E6DB74"> /var/lib/docker</span><span style="color:#AE81FF"> -name</span><span style="color:#E6DB74"> &quot;*.img&quot;</span><span style="color:#AE81FF">  -size</span><span style="color:#E6DB74"> +10G</span></span></code></pre></div>',j,C,Le="You should look for a file path with something like:",Z,v,xe='<div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span>/var/lib/docker/overlay2/&lt;image_hash&gt;/diff/home/arch/OSX-KVM/mac_hdd_ng.img</span></span></code></pre></div>',J,M,Te="Copy this file to somewhere that you can manage more easily.",ee,A,Be='<a aria-hidden="true" tabindex="-1" href="#step-3---all-subsequent-runs"><span class="icon icon-link"></span></a>Step 3 - All subsequent runs',se,D,ge=`<div class="code-block-header">First run <span class="code-block-lang">[bash]</span></div> <div class="code-block code-block-numbered numbered-start-10 code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line" data-line="1"><span style="color:#A6E22E">docker</span><span style="color:#E6DB74"> run</span><span style="color:#AE81FF"> -it</span><span style="color:#AE81FF"> \\</span></span>
<span class="line highlight" data-line="2"><span style="color:#AE81FF">    -p</span><span style="color:#E6DB74"> 50922:10022</span><span style="color:#AE81FF"> \\</span></span>
<span class="line highlight" data-line="3"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> GENERATE_UNIQUE=</span><span style="color:#AE81FF">true</span><span style="color:#AE81FF"> \\</span></span>
<span class="line highlight" data-line="4"><span style="color:#AE81FF">    -v</span><span style="color:#E6DB74"> &quot;</span><span style="color:#F8F8F2">$PWD</span><span style="color:#E6DB74">/mac_hdd.img:/image&quot;</span><span style="color:#AE81FF"> \\</span></span>
<span class="line" data-line="5"><span style="color:#AE81FF">    -v</span><span style="color:#F8F8F2"> $XDG_RUNTIME_DIR</span><span style="color:#E6DB74">/</span><span style="color:#F8F8F2">$WAYLAND_DISPLAY</span><span style="color:#E6DB74">:/tmp/</span><span style="color:#F8F8F2">$WAYLAND_DISPLAY </span><span style="color:#AE81FF">\\</span></span>
<span class="line highlight" data-line="6"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> WAYLAND_DISPLAY=&quot;\${</span><span style="color:#F8F8F2">WAYLAND_DISPLAY</span><span style="color:#F92672">:-</span><span style="color:#F8F8F2">wayland-0</span><span style="color:#E6DB74">}&quot;</span><span style="color:#AE81FF"> \\</span></span>
<span class="line" data-line="7"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> DISPLAY=&quot;:1&quot;</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> QT_QPA_PLATFORM=wayland</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> XDG_RUNTIME_DIR=/tmp</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> GDK_BACKEND=wayland</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> CLUTTER_BACKEND=wayland</span><span style="color:#AE81FF"> \\</span></span>
<span class="line" data-line="8"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> MASTER_PLIST_URL=&#39;https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom-sonoma.plist&#39;</span><span style="color:#AE81FF"> \\</span></span>
<span class="line" data-line="9"><span style="color:#E6DB74">    sickcodes/docker-osx:naked</span></span></code></pre></div>`,te,H,we=`In particular, notice the additional mount of the image file, and the new
<code>naked</code> tag for the docker image. All subsequent runs will update the OSX image
file, allow for your session to be effectively persistent.`,ne,k,Ce='<a aria-hidden="true" tabindex="-1" href="#some-additional-information"><span class="icon icon-link"></span></a>Some additional information',le,S,Me=`The main reason for this write-up is the instructions on the <a href="https://github.com/sickcodes/Docker-OSX" rel="nofollow">project
repository</a> assumes the host system uses X11. The instructions for
wayland can be found in the scattered issues page, but has yet to be updated on
the main page (wayland only became the “default” very recently on most desktop
environments). This write is for my own mentally offloading the record of the
instruction that worked for me on my system. As far as I know, the only
difference between the commands on wayland the command are the lines containing
display settings:`,ae,f,He=`<div class="code-block-header"><span class="code-block-lang">[bash]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#A6E22E">    -v</span><span style="color:#F8F8F2"> $XDG_RUNTIME_DIR</span><span style="color:#E6DB74">/</span><span style="color:#F8F8F2">$WAYLAND_DISPLAY</span><span style="color:#E6DB74">:/tmp/</span><span style="color:#F8F8F2">$WAYLAND_DISPLAY </span><span style="color:#AE81FF">\\</span></span>
<span class="line"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> WAYLAND_DISPLAY=&quot;\${</span><span style="color:#F8F8F2">WAYLAND_DISPLAY</span><span style="color:#F92672">:-</span><span style="color:#F8F8F2">wayland-0</span><span style="color:#E6DB74">}&quot;</span><span style="color:#AE81FF"> \\</span></span>
<span class="line"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> DISPLAY=&quot;:1&quot;</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> QT_QPA_PLATFORM=wayland</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> XDG_RUNTIME_DIR=/tmp</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> GDK_BACKEND=wayland</span><span style="color:#AE81FF"> -e</span><span style="color:#E6DB74"> CLUTTER_BACKEND=wayland</span><span style="color:#AE81FF"> \\</span></span></code></pre></div>`,oe,I,Se="Substitute the above to:",ie,b,Ie='<div class="code-block-header"><span class="code-block-lang">[bash]</span></div> <div class="code-block code-copyable"><pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#A6E22E">    -v</span><span style="color:#E6DB74"> /tmp/.X11-unix:/tmp/.X11-unix</span><span style="color:#AE81FF"> \\</span></span>\n<span class="line"><span style="color:#AE81FF">    -e</span><span style="color:#E6DB74"> &quot;DISPLAY=${</span><span style="color:#F8F8F2">DISPLAY</span><span style="color:#F92672">:-:</span><span style="color:#F8F8F2">0</span><span style="color:#E6DB74">.</span><span style="color:#F8F8F2">0</span><span style="color:#E6DB74">}&quot;</span><span style="color:#AE81FF"> \\</span></span></code></pre></div>',pe,P,Pe="When running on X11 systems.";return{c(){r=l("nav"),r.innerHTML=re,q=i(),_=l("p"),_.innerHTML=de,N=i(),d=l("h2"),d.innerHTML=ye,Y=i(),y=l("h3"),y.innerHTML=Fe,R=i(),L=l("ul"),L.innerHTML=ue,X=i(),x=l("p"),x.innerHTML=he,U=i(),F=l("div"),F.innerHTML=me,O=i(),u=l("h3"),u.innerHTML=Ee,W=i(),h=l("div"),h.innerHTML=ve,G=i(),T=l("p"),T.textContent=Ae,K=i(),B=l("blockquote"),B.innerHTML=De,$=i(),g=l("p"),g.textContent=ke,z=i(),m=l("h3"),m.innerHTML=fe,Q=i(),w=l("p"),w.textContent=be,V=i(),E=l("div"),E.innerHTML=_e,j=i(),C=l("p"),C.textContent=Le,Z=i(),v=l("div"),v.innerHTML=xe,J=i(),M=l("p"),M.textContent=Te,ee=i(),A=l("h3"),A.innerHTML=Be,se=i(),D=l("div"),D.innerHTML=ge,te=i(),H=l("p"),H.innerHTML=we,ne=i(),k=l("h2"),k.innerHTML=Ce,le=i(),S=l("p"),S.innerHTML=Me,ae=i(),f=l("div"),f.innerHTML=He,oe=i(),I=l("p"),I.textContent=Se,ie=i(),b=l("div"),b.innerHTML=Ie,pe=i(),P=l("p"),P.textContent=Pe,this.h()},l(e){r=a(e,"NAV",{class:!0,"data-svelte-h":!0}),o(r)!=="svelte-hoinza"&&(r.innerHTML=re),q=p(e),_=a(e,"P",{"data-svelte-h":!0}),o(_)!=="svelte-1gmxmg8"&&(_.innerHTML=de),N=p(e),d=a(e,"H2",{id:!0,"data-svelte-h":!0}),o(d)!=="svelte-vz6osx"&&(d.innerHTML=ye),Y=p(e),y=a(e,"H3",{id:!0,"data-svelte-h":!0}),o(y)!=="svelte-d38f1v"&&(y.innerHTML=Fe),R=p(e),L=a(e,"UL",{"data-svelte-h":!0}),o(L)!=="svelte-kfizzf"&&(L.innerHTML=ue),X=p(e),x=a(e,"P",{"data-svelte-h":!0}),o(x)!=="svelte-cig7b3"&&(x.innerHTML=he),U=p(e),F=a(e,"DIV",{class:!0,"data-svelte-h":!0}),o(F)!=="svelte-abimt5"&&(F.innerHTML=me),O=p(e),u=a(e,"H3",{id:!0,"data-svelte-h":!0}),o(u)!=="svelte-bwi01a"&&(u.innerHTML=Ee),W=p(e),h=a(e,"DIV",{class:!0,"data-svelte-h":!0}),o(h)!=="svelte-160x7d0"&&(h.innerHTML=ve),G=p(e),T=a(e,"P",{"data-svelte-h":!0}),o(T)!=="svelte-1wskybz"&&(T.textContent=Ae),K=p(e),B=a(e,"BLOCKQUOTE",{"data-svelte-h":!0}),o(B)!=="svelte-rfw2vr"&&(B.innerHTML=De),$=p(e),g=a(e,"P",{"data-svelte-h":!0}),o(g)!=="svelte-xxpzty"&&(g.textContent=ke),z=p(e),m=a(e,"H3",{id:!0,"data-svelte-h":!0}),o(m)!=="svelte-1vkfp47"&&(m.innerHTML=fe),Q=p(e),w=a(e,"P",{"data-svelte-h":!0}),o(w)!=="svelte-1ymkmdr"&&(w.textContent=be),V=p(e),E=a(e,"DIV",{class:!0,"data-svelte-h":!0}),o(E)!=="svelte-hvt9e8"&&(E.innerHTML=_e),j=p(e),C=a(e,"P",{"data-svelte-h":!0}),o(C)!=="svelte-1qppvn1"&&(C.textContent=Le),Z=p(e),v=a(e,"DIV",{class:!0,"data-svelte-h":!0}),o(v)!=="svelte-1pi867f"&&(v.innerHTML=xe),J=p(e),M=a(e,"P",{"data-svelte-h":!0}),o(M)!=="svelte-dtz1ag"&&(M.textContent=Te),ee=p(e),A=a(e,"H3",{id:!0,"data-svelte-h":!0}),o(A)!=="svelte-sww1hg"&&(A.innerHTML=Be),se=p(e),D=a(e,"DIV",{class:!0,"data-svelte-h":!0}),o(D)!=="svelte-1kl0eg6"&&(D.innerHTML=ge),te=p(e),H=a(e,"P",{"data-svelte-h":!0}),o(H)!=="svelte-j8lkbu"&&(H.innerHTML=we),ne=p(e),k=a(e,"H2",{id:!0,"data-svelte-h":!0}),o(k)!=="svelte-1h8q4jh"&&(k.innerHTML=Ce),le=p(e),S=a(e,"P",{"data-svelte-h":!0}),o(S)!=="svelte-1edbev7"&&(S.innerHTML=Me),ae=p(e),f=a(e,"DIV",{class:!0,"data-svelte-h":!0}),o(f)!=="svelte-1aws1xz"&&(f.innerHTML=He),oe=p(e),I=a(e,"P",{"data-svelte-h":!0}),o(I)!=="svelte-brvg09"&&(I.textContent=Se),ie=p(e),b=a(e,"DIV",{class:!0,"data-svelte-h":!0}),o(b)!=="svelte-l2o09y"&&(b.innerHTML=Ie),pe=p(e),P=a(e,"P",{"data-svelte-h":!0}),o(P)!=="svelte-odmcve"&&(P.textContent=Pe),this.h()},h(){c(r,"class","toc"),c(d,"id","tldr-nearly-copy-and-paste-commands"),c(y,"id","step-0---checking-the-dependencies"),c(F,"class","code-block-container"),c(u,"id","step-1---creating-the-base-image"),c(h,"class","code-block-container"),c(m,"id","step-2---extracting-the-generated-image"),c(E,"class","code-block-container"),c(v,"class","code-block-container"),c(A,"id","step-3---all-subsequent-runs"),c(D,"class","code-block-container"),c(k,"id","some-additional-information"),c(f,"class","code-block-container"),c(b,"class","code-block-container")},m(e,s){t(e,r,s),t(e,q,s),t(e,_,s),t(e,N,s),t(e,d,s),t(e,Y,s),t(e,y,s),t(e,R,s),t(e,L,s),t(e,X,s),t(e,x,s),t(e,U,s),t(e,F,s),t(e,O,s),t(e,u,s),t(e,W,s),t(e,h,s),t(e,G,s),t(e,T,s),t(e,K,s),t(e,B,s),t(e,$,s),t(e,g,s),t(e,z,s),t(e,m,s),t(e,Q,s),t(e,w,s),t(e,V,s),t(e,E,s),t(e,j,s),t(e,C,s),t(e,Z,s),t(e,v,s),t(e,J,s),t(e,M,s),t(e,ee,s),t(e,A,s),t(e,se,s),t(e,D,s),t(e,te,s),t(e,H,s),t(e,ne,s),t(e,k,s),t(e,le,s),t(e,S,s),t(e,ae,s),t(e,f,s),t(e,oe,s),t(e,I,s),t(e,ie,s),t(e,b,s),t(e,pe,s),t(e,P,s)},p:ce,i:ce,o:ce,d(e){e&&(n(r),n(q),n(_),n(N),n(d),n(Y),n(y),n(R),n(L),n(X),n(x),n(U),n(F),n(O),n(u),n(W),n(h),n(G),n(T),n(K),n(B),n($),n(g),n(z),n(m),n(Q),n(w),n(V),n(E),n(j),n(C),n(Z),n(v),n(J),n(M),n(ee),n(A),n(se),n(D),n(te),n(H),n(ne),n(k),n(le),n(S),n(ae),n(f),n(oe),n(I),n(ie),n(b),n(pe),n(P))}}}const We={title:"Running a virtual OSX machine using docker",description:"Quick notes for running an OSX virtual machine",tags:["computing","notes"],banner:"code_head_1.png",modified:"2024-04-09T00:00:00.000Z"};class Ge extends Ye{constructor(r){super(),Re(this,r,null,Xe,Ne,{})}}export{Ge as default,We as metadata};
